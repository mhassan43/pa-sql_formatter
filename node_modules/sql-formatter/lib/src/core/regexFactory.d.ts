declare const quotePatterns: {
    '``': string;
    '[]': string;
    '""': string;
    "''": string;
    $$: string;
    "'''..'''": string;
    '""".."""': string;
    '{}': string;
};
export declare type PlainQuoteType = keyof typeof quotePatterns;
export declare type PrefixedQuoteType = {
    quote: PlainQuoteType;
    prefixes: string[];
    required?: boolean;
};
export declare type QuoteType = PlainQuoteType | PrefixedQuoteType;
export interface VariableRegex {
    regex: string;
}
export declare type VariableType = VariableRegex | PrefixedQuoteType;
export interface IdentChars {
    first?: string;
    rest?: string;
    dashes?: boolean;
}
/**
 * Builds a RegExp containing all operators for a SQL dialect
 * @param {string} monadOperators - concatenated string of all 1-length operators
 * @param {string[]} polyadOperators - list of strings of all >1-length operators
 */
export declare const createOperatorRegex: (monadOperators: string, polyadOperators: string[]) => RegExp;
/**
 * Builds a RegExp for valid line comments in a SQL dialect
 * @param {string[]} lineCommentTypes - list of character strings that denote line comments
 */
export declare const createLineCommentRegex: (lineCommentTypes: string[]) => RegExp;
/**
 * Builds a RegExp for all Reserved Keywords in a SQL dialect
 */
export declare const createReservedWordRegex: (reservedKeywords: string[], identChars?: IdentChars) => RegExp;
/**
 * Builds a RegExp for valid identifiers in a SQL dialect
 */
export declare const createIdentRegex: (specialChars?: IdentChars) => RegExp;
/**
 * Builds a RegExp string for valid identifiers in a SQL dialect
 */
export declare const createIdentPattern: ({ first, rest, dashes }?: IdentChars) => string;
/** Builds a quote-delimited pattern for matching all given quote types */
export declare const createQuotePattern: (quoteTypes: QuoteType[]) => string;
/** Builds a RegExp for matching variables */
export declare const createVariableRegex: (varTypes: VariableType[]) => RegExp;
/** Builds a RegExp for matching quote-delimited patterns */
export declare const createQuoteRegex: (quoteTypes: QuoteType[]) => RegExp;
/**
 * Builds a RegExp for matching parenthesis patterns, escaping them with `escapeParen`
 * @param {string[]} parens - list of strings that denote parenthesis patterns
 */
export declare const createParenRegex: (parens: string[]) => RegExp;
/**
 * Builds a RegExp for parameter placeholder patterns
 * @param {string[]} types - list of strings that denote placeholder types
 * @param {string} pattern - string that denotes placeholder pattern
 */
export declare const createParameterRegex: (types: string[], pattern: string) => RegExp | undefined;
export {};
