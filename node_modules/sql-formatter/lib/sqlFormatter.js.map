{"version":3,"sources":["../src/sqlFormatter.ts"],"names":["formatters","bigquery","BigQueryFormatter","db2","Db2Formatter","hive","HiveFormatter","mariadb","MariaDbFormatter","mysql","MySqlFormatter","n1ql","N1qlFormatter","plsql","PlSqlFormatter","postgresql","PostgreSqlFormatter","redshift","RedshiftFormatter","spark","SparkFormatter","sql","SqlFormatter","sqlite","SqliteFormatter","tsql","TSqlFormatter","supportedDialects","Object","keys","defaultOptions","language","tabWidth","useTabs","keywordCase","indentStyle","multilineLists","logicalOperatorNewline","aliasAs","tabulateAlias","commaPosition","newlineBeforeOpenParen","newlineBeforeCloseParen","expressionWidth","linesBetweenQueries","denseOperators","newlineBeforeSemicolon","format","query","cfg","Error","options","validateConfig","Formatter","ConfigError","includes","params","undefined"],"mappings":"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","sourcesContent":["import BigQueryFormatter from 'src/languages/bigquery.formatter';\nimport Db2Formatter from 'src/languages/db2.formatter';\nimport HiveFormatter from 'src/languages/hive.formatter';\nimport MariaDbFormatter from 'src/languages/mariadb.formatter';\nimport MySqlFormatter from 'src/languages/mysql.formatter';\nimport N1qlFormatter from 'src/languages/n1ql.formatter';\nimport PlSqlFormatter from 'src/languages/plsql.formatter';\nimport PostgreSqlFormatter from 'src/languages/postgresql.formatter';\nimport RedshiftFormatter from 'src/languages/redshift.formatter';\nimport SparkFormatter from 'src/languages/spark.formatter';\nimport SqliteFormatter from 'src/languages/sqlite.formatter';\nimport SqlFormatter from 'src/languages/sql.formatter';\nimport TSqlFormatter from 'src/languages/tsql.formatter';\n\nimport type { FormatOptions } from './types';\nimport { isNumber } from './utils';\n\nexport const formatters = {\n  bigquery: BigQueryFormatter,\n  db2: Db2Formatter,\n  hive: HiveFormatter,\n  mariadb: MariaDbFormatter,\n  mysql: MySqlFormatter,\n  n1ql: N1qlFormatter,\n  plsql: PlSqlFormatter,\n  postgresql: PostgreSqlFormatter,\n  redshift: RedshiftFormatter,\n  spark: SparkFormatter,\n  sql: SqlFormatter,\n  sqlite: SqliteFormatter,\n  tsql: TSqlFormatter,\n};\nexport type SqlLanguage = keyof typeof formatters;\nexport const supportedDialects = Object.keys(formatters);\n\nexport type FormatFnOptions = FormatOptions & { language: SqlLanguage };\n\nconst defaultOptions: FormatFnOptions = {\n  language: 'sql',\n  tabWidth: 2,\n  useTabs: false,\n  keywordCase: 'preserve',\n  indentStyle: 'standard',\n  multilineLists: 'always',\n  logicalOperatorNewline: 'before',\n  aliasAs: 'preserve',\n  tabulateAlias: false,\n  commaPosition: 'after',\n  newlineBeforeOpenParen: true,\n  newlineBeforeCloseParen: true,\n  expressionWidth: 50,\n  linesBetweenQueries: 1,\n  denseOperators: false,\n  newlineBeforeSemicolon: false,\n};\n\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {string} query - input SQL query string\n * @param {FormatOptions} cfg Configuration options (see docs in README)\n * @return {string} formatted query\n */\nexport const format = (query: string, cfg: Partial<FormatFnOptions> = {}): string => {\n  if (typeof query !== 'string') {\n    throw new Error('Invalid query argument. Expected string, instead got ' + typeof query);\n  }\n\n  const options = validateConfig({\n    ...defaultOptions,\n    ...cfg,\n  });\n\n  const Formatter = formatters[options.language];\n  return new Formatter(options).format(query);\n};\n\nexport class ConfigError extends Error {}\n\nfunction validateConfig(cfg: FormatFnOptions): FormatFnOptions {\n  if (!supportedDialects.includes(cfg.language)) {\n    throw new ConfigError(`Unsupported SQL dialect: ${cfg.language}`);\n  }\n\n  if (isNumber(cfg.multilineLists) && cfg.multilineLists <= 0) {\n    throw new ConfigError('multilineLists config must be a positive number.');\n  }\n\n  if (cfg.expressionWidth <= 0) {\n    throw new ConfigError(\n      `expressionWidth config must be positive number. Received ${cfg.expressionWidth} instead.`\n    );\n  }\n\n  if (cfg.commaPosition === 'before' && cfg.useTabs) {\n    throw new ConfigError(\n      'commaPosition: before does not work when tabs are used for indentation.'\n    );\n  }\n\n  if (cfg.language === 'hive' && cfg.params !== undefined) {\n    throw new ConfigError(\n      'Unexpected \"params\" option. Prepared statement placeholders not supported for Hive.'\n    );\n  }\n\n  if (cfg.language === 'spark' && cfg.params !== undefined) {\n    throw new ConfigError(\n      'Unexpected \"params\" option. Prepared statement placeholders not supported for Spark.'\n    );\n  }\n\n  return cfg;\n}\n\nexport type FormatFn = typeof format;\n"],"file":"sqlFormatter.js"}