{"version":3,"sources":["../../src/core/AsTokenFactory.ts"],"names":["AsTokenFactory","keywordCase","tokens","detectedCase","autoDetectCase","asTokens","filter","isToken","AS","upperAsTokens","text","length","type","TokenType","RESERVED_KEYWORD","value","asTokenValue"],"mappings":";;;;;;;AAEA;;;;;;;;;;IAEqBA,c;AAGnB,0BAAoBC,WAApB,EAAoE;AAAA,QAAtBC,MAAsB,uEAAJ,EAAI;;AAAA;;AAAA,SAAhDD,WAAgD,GAAhDA,WAAgD;;AAAA;;AAClE,SAAKE,YAAL,GAAoB,KAAKC,cAAL,CAAoBF,MAApB,CAApB;AACD;;;;WAED,wBAAuBA,MAAvB,EAAwC;AACtC,UAAMG,QAAQ,GAAGH,MAAM,CAACI,MAAP,CAAcC,eAAQC,EAAtB,CAAjB;AACA,UAAMC,aAAa,GAAGJ,QAAQ,CAACC,MAAT,CAAgB;AAAA,YAAGI,IAAH,QAAGA,IAAH;AAAA,eAAcA,IAAI,KAAK,IAAvB;AAAA,OAAhB,CAAtB;AACA,aAAOD,aAAa,CAACE,MAAd,GAAuBN,QAAQ,CAACM,MAAT,GAAkB,CAAzC,GAA6C,OAA7C,GAAuD,OAA9D;AACD;AAED;;;;WACA,iBAAsB;AACpB,aAAO;AACLC,QAAAA,IAAI,EAAEC,iBAAUC,gBADX;AAELC,QAAAA,KAAK,EAAE,KAAKC,YAAL,EAFF;AAGLN,QAAAA,IAAI,EAAE,KAAKM,YAAL;AAHD,OAAP;AAKD;;;WAED,wBAAoC;AAClC,UAAMf,WAAW,GAAG,KAAKA,WAAL,KAAqB,UAArB,GAAkC,KAAKE,YAAvC,GAAsD,KAAKF,WAA/E;AACA,aAAOA,WAAW,KAAK,OAAhB,GAA0B,IAA1B,GAAiC,IAAxC;AACD","sourcesContent":["import type { KeywordCase } from 'src/types';\n\nimport { isToken, type Token, TokenType } from './token';\n\nexport default class AsTokenFactory {\n  private detectedCase: KeywordCase;\n\n  constructor(private keywordCase: KeywordCase, tokens: Token[] = []) {\n    this.detectedCase = this.autoDetectCase(tokens);\n  }\n\n  private autoDetectCase(tokens: Token[]) {\n    const asTokens = tokens.filter(isToken.AS);\n    const upperAsTokens = asTokens.filter(({ text }) => text === 'AS');\n    return upperAsTokens.length > asTokens.length / 2 ? 'upper' : 'lower';\n  }\n\n  /** Returns AS token with either upper- or lowercase text */\n  public token(): Token {\n    return {\n      type: TokenType.RESERVED_KEYWORD,\n      value: this.asTokenValue(),\n      text: this.asTokenValue(),\n    };\n  }\n\n  private asTokenValue(): 'AS' | 'as' {\n    const keywordCase = this.keywordCase === 'preserve' ? this.detectedCase : this.keywordCase;\n    return keywordCase === 'upper' ? 'AS' : 'as';\n  }\n}\n"],"file":"AsTokenFactory.js"}