{"version":3,"sources":["../../src/core/WhitespaceBuilder.ts"],"names":["WS","WhitespaceBuilder","indentation","items","item","SPACE","query","push","NO_SPACE","trimHorizontalWhitespace","NEWLINE","addNewline","NO_NEWLINE","trimAllWhitespace","INDENT","i","getLevel","SINGLE_INDENT","isHorizontalWhitespace","pop","isWhitespace","length","map","itemToString","join","getSingleIndent"],"mappings":"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","sourcesContent":["import { last } from 'src/utils';\n\nimport Indentation from './Indentation';\n\n/** Whitespace modifiers to be used with add() method */\nexport enum WS {\n  SPACE = 1, // Adds single space\n  NO_SPACE = 2, // Removes preceding spaces (if any)\n  NEWLINE = 3, // Adds single newline\n  NO_NEWLINE = 4, // Removes all preceding whitespace (including newlines)\n  INDENT = 5, // Adds indentation (as much as needed for current indentation level)\n  SINGLE_INDENT = 6, // Adds whitespace for single indentation step\n}\n\n/**\n * API for constructing SQL string (especially the whitespace part).\n *\n * It hides the internal implementation.\n * Originally it used plain string concatenation, which was expensive.\n * Now it's storing items to array and builds the string only in the end.\n */\nexport default class WhitespaceBuilder {\n  private query: (WS.SPACE | WS.SINGLE_INDENT | WS.NEWLINE | string)[] = [];\n\n  constructor(private indentation: Indentation) {}\n\n  /**\n   * Appends token strings and whitespace modifications to SQL string.\n   */\n  public add(...items: (WS | string)[]) {\n    for (const item of items) {\n      switch (item) {\n        case WS.SPACE:\n          this.query.push(WS.SPACE);\n          break;\n        case WS.NO_SPACE:\n          this.trimHorizontalWhitespace();\n          break;\n        case WS.NEWLINE:\n          this.trimHorizontalWhitespace();\n          this.addNewline();\n          break;\n        case WS.NO_NEWLINE:\n          this.trimAllWhitespace();\n          break;\n        case WS.INDENT:\n          for (let i = 0; i < this.indentation.getLevel(); i++) {\n            this.query.push(WS.SINGLE_INDENT);\n          }\n          break;\n        case WS.SINGLE_INDENT:\n          this.query.push(WS.SINGLE_INDENT);\n          break;\n        default:\n          this.query.push(item);\n      }\n    }\n  }\n\n  private trimHorizontalWhitespace() {\n    while (isHorizontalWhitespace(last(this.query))) {\n      this.query.pop();\n    }\n  }\n\n  private trimAllWhitespace() {\n    while (isWhitespace(last(this.query))) {\n      this.query.pop();\n    }\n  }\n\n  private addNewline() {\n    if (this.query.length > 0 && last(this.query) !== WS.NEWLINE) {\n      this.query.push(WS.NEWLINE);\n    }\n  }\n\n  /**\n   * Returns the final SQL string.\n   */\n  public toString(): string {\n    return this.query.map(item => this.itemToString(item)).join('');\n  }\n\n  private itemToString(item: WS | string) {\n    switch (item) {\n      case WS.SPACE:\n        return ' ';\n      case WS.NEWLINE:\n        return '\\n';\n      case WS.SINGLE_INDENT:\n        return this.indentation.getSingleIndent();\n      default:\n        return item;\n    }\n  }\n}\n\nconst isHorizontalWhitespace = (item: WS | string | undefined) =>\n  item === WS.SPACE || item === WS.SINGLE_INDENT;\n\nconst isWhitespace = (item: WS | string | undefined) =>\n  item === WS.SPACE || item === WS.SINGLE_INDENT || item === WS.NEWLINE;\n"],"file":"WhitespaceBuilder.js"}