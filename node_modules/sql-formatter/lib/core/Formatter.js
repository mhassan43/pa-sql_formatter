"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _Params = _interopRequireDefault(require("./Params"));

var _formatCommaPositions = _interopRequireDefault(require("./formatCommaPositions"));

var _formatAliasPositions = _interopRequireDefault(require("./formatAliasPositions"));

var _AsTokenFactory = _interopRequireDefault(require("./AsTokenFactory"));

var _Parser = _interopRequireDefault(require("./Parser"));

var _StatementFormatter = _interopRequireDefault(require("./StatementFormatter"));

var _config = require("./config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Main formatter class that produces a final output string from list of tokens */
var Formatter = /*#__PURE__*/function () {
  function Formatter(cfg) {
    _classCallCheck(this, Formatter);

    _defineProperty(this, "cfg", void 0);

    _defineProperty(this, "params", void 0);

    this.cfg = cfg;
    this.params = new _Params["default"](this.cfg.params);
  }
  /**
   * SQL Tokenizer for this formatter, provided by subclasses.
   */


  _createClass(Formatter, [{
    key: "tokenizer",
    value: function tokenizer() {
      throw new Error('tokenizer() not implemented by subclass');
    } // Cache the tokenizer for each class (each SQL dialect)
    // So we wouldn't need to recreate the tokenizer, which is kinda expensive,
    // for each call to format() function.

  }, {
    key: "cachedTokenizer",
    value: function cachedTokenizer() {
      var cls = this.constructor;

      if (!cls.cachedTokenizer) {
        cls.cachedTokenizer = this.tokenizer();
      }

      return cls.cachedTokenizer;
    }
    /**
     * Formats an SQL query.
     * @param {string} query - The SQL query string to be formatted
     * @return {string} The formatter query
     */

  }, {
    key: "format",
    value: function format(query) {
      var tokens = this.cachedTokenizer().tokenize(query);
      var ast = new _Parser["default"](tokens).parse();
      var formattedQuery = this.formatAst(ast, tokens);
      var finalQuery = this.postFormat(formattedQuery);
      return finalQuery.trimEnd();
    }
  }, {
    key: "formatAst",
    value: function formatAst(statements, tokens) {
      var _this = this;

      var asTokenFactory = new _AsTokenFactory["default"](this.cfg.keywordCase, tokens);
      return statements.map(function (stat) {
        return new _StatementFormatter["default"](_this.cfg, _this.params, asTokenFactory).format(stat);
      }).join('\n'.repeat(this.cfg.linesBetweenQueries + 1));
    }
  }, {
    key: "postFormat",
    value: function postFormat(query) {
      if (this.cfg.tabulateAlias) {
        query = (0, _formatAliasPositions["default"])(query);
      }

      if (this.cfg.commaPosition === 'before' || this.cfg.commaPosition === 'tabular') {
        query = (0, _formatCommaPositions["default"])(query, this.cfg.commaPosition, (0, _config.indentString)(this.cfg));
      }

      return query;
    }
  }]);

  return Formatter;
}();

exports["default"] = Formatter;
module.exports = exports.default;
//# sourceMappingURL=Formatter.js.map