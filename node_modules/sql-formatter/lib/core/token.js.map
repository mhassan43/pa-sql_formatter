{"version":3,"sources":["../../src/core/token.ts"],"names":["TokenType","EOF_TOKEN","type","EOF","text","value","testToken","compareToken","token","isToken","AS","RESERVED_KEYWORD","AND","RESERVED_LOGICAL_OPERATOR","BETWEEN","CASE","RESERVED_CASE_START","CAST","BY","END","RESERVED_CASE_END","FROM","RESERVED_COMMAND","LIMIT","SELECT","SET","TABLE","WINDOW","WITH","isCommand","RESERVED_BINARY_COMMAND","isReserved","RESERVED_DEPENDENT_CLAUSE","RESERVED_JOIN_CONDITION"],"mappings":";;;;;;;AAAA;IACYA,S;AAsBZ;;;;WAtBYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,yBAAAA,S;;AA+BZ;AACA;AACA;AACA;AACO,IAAMC,SAAS,GAAG;AAAEC,EAAAA,IAAI,EAAEF,SAAS,CAACG,GAAlB;AAAuBC,EAAAA,IAAI,EAAE,OAA7B;AAAsCC,EAAAA,KAAK,EAAE;AAA7C,CAAlB;AAEP;;;;AACO,IAAMC,SAAS,GACpB,SADWA,SACX,CAACC,YAAD;AAAA,SACA,UAACC,KAAD;AAAA,WACEA,KAAK,CAACN,IAAN,KAAeK,YAAY,CAACL,IAA5B,IAAoCM,KAAK,CAACH,KAAN,KAAgBE,YAAY,CAACF,KADnE;AAAA,GADA;AAAA,CADK;AAKP;;;;AACO,IAAMI,OAAO,GAAG;AACrBC,EAAAA,EAAE,EAAEJ,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeH,IAAAA,IAAI,EAAEF,SAAS,CAACW;AAA/B,GAAD,CADQ;AAErBC,EAAAA,GAAG,EAAEN,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBH,IAAAA,IAAI,EAAEF,SAAS,CAACa;AAAhC,GAAD,CAFO;AAGrBC,EAAAA,OAAO,EAAER,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,SAAT;AAAoBH,IAAAA,IAAI,EAAEF,SAAS,CAACW;AAApC,GAAD,CAHG;AAIrBI,EAAAA,IAAI,EAAET,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,MAAT;AAAiBH,IAAAA,IAAI,EAAEF,SAAS,CAACgB;AAAjC,GAAD,CAJM;AAKrBC,EAAAA,IAAI,EAAEX,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,MAAT;AAAiBH,IAAAA,IAAI,EAAEF,SAAS,CAACW;AAAjC,GAAD,CALM;AAMrBO,EAAAA,EAAE,EAAEZ,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,IAAT;AAAeH,IAAAA,IAAI,EAAEF,SAAS,CAACW;AAA/B,GAAD,CANQ;AAOrBQ,EAAAA,GAAG,EAAEb,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBH,IAAAA,IAAI,EAAEF,SAAS,CAACoB;AAAhC,GAAD,CAPO;AAQrBC,EAAAA,IAAI,EAAEf,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,MAAT;AAAiBH,IAAAA,IAAI,EAAEF,SAAS,CAACsB;AAAjC,GAAD,CARM;AASrBC,EAAAA,KAAK,EAAEjB,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,OAAT;AAAkBH,IAAAA,IAAI,EAAEF,SAAS,CAACsB;AAAlC,GAAD,CATK;AAUrBE,EAAAA,MAAM,EAAElB,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,QAAT;AAAmBH,IAAAA,IAAI,EAAEF,SAAS,CAACsB;AAAnC,GAAD,CAVI;AAWrBG,EAAAA,GAAG,EAAEnB,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,KAAT;AAAgBH,IAAAA,IAAI,EAAEF,SAAS,CAACsB;AAAhC,GAAD,CAXO;AAYrBI,EAAAA,KAAK,EAAEpB,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,OAAT;AAAkBH,IAAAA,IAAI,EAAEF,SAAS,CAACW;AAAlC,GAAD,CAZK;AAarBgB,EAAAA,MAAM,EAAErB,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,QAAT;AAAmBH,IAAAA,IAAI,EAAEF,SAAS,CAACsB;AAAnC,GAAD,CAbI;AAcrBM,EAAAA,IAAI,EAAEtB,SAAS,CAAC;AAAED,IAAAA,KAAK,EAAE,MAAT;AAAiBH,IAAAA,IAAI,EAAEF,SAAS,CAACsB;AAAjC,GAAD;AAdM,CAAhB;AAiBP;;;;AACO,IAAMO,SAAS,GAAG,SAAZA,SAAY,CAACrB,KAAD;AAAA,SACvBA,KAAK,CAACN,IAAN,KAAeF,SAAS,CAACsB,gBAAzB,IAA6Cd,KAAK,CAACN,IAAN,KAAeF,SAAS,CAAC8B,uBAD/C;AAAA,CAAlB;AAGP;;;;;AACO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACvB,KAAD;AAAA,SACxBA,KAAK,CAACN,IAAN,KAAeF,SAAS,CAACW,gBAAzB,IACAH,KAAK,CAACN,IAAN,KAAeF,SAAS,CAACa,yBADzB,IAEAL,KAAK,CAACN,IAAN,KAAeF,SAAS,CAACgC,yBAFzB,IAGAxB,KAAK,CAACN,IAAN,KAAeF,SAAS,CAACiC,uBAHzB,IAIAzB,KAAK,CAACN,IAAN,KAAeF,SAAS,CAACsB,gBAJzB,IAKAd,KAAK,CAACN,IAAN,KAAeF,SAAS,CAAC8B,uBALzB,IAMAtB,KAAK,CAACN,IAAN,KAAeF,SAAS,CAACgB,mBANzB,IAOAR,KAAK,CAACN,IAAN,KAAeF,SAAS,CAACoB,iBARD;AAAA,CAAnB","sourcesContent":["/** Token type enum for all possible Token categories */\nexport enum TokenType {\n  IDENT = 'IDENT',\n  STRING = 'STRING',\n  VARIABLE = 'VARIABLE',\n  RESERVED_KEYWORD = 'RESERVED_KEYWORD',\n  RESERVED_LOGICAL_OPERATOR = 'RESERVED_LOGICAL_OPERATOR',\n  RESERVED_DEPENDENT_CLAUSE = 'RESERVED_DEPENDENT_CLAUSE',\n  RESERVED_BINARY_COMMAND = 'RESERVED_BINARY_COMMAND',\n  RESERVED_COMMAND = 'RESERVED_COMMAND',\n  RESERVED_JOIN_CONDITION = 'RESERVED_JOIN_CONDITION',\n  RESERVED_CASE_START = 'RESERVED_CASE_START',\n  RESERVED_CASE_END = 'RESERVED_CASE_END',\n  OPERATOR = 'OPERATOR',\n  BLOCK_START = 'BLOCK_START',\n  BLOCK_END = 'BLOCK_END',\n  LINE_COMMENT = 'LINE_COMMENT',\n  BLOCK_COMMENT = 'BLOCK_COMMENT',\n  NUMBER = 'NUMBER',\n  PARAMETER = 'PARAMETER',\n  EOF = 'EOF',\n}\n\n/** Struct to store the most basic cohesive unit of language grammar */\nexport interface Token {\n  type: TokenType;\n  text: string; // The raw original text that was matched\n  value: string; // Cleaned up `text` e.g. keyword converted to uppercase and extra spaces removed\n  key?: string;\n  whitespaceBefore?: string;\n}\n\n/**\n * For use as a \"missing token\"\n * e.g. in lookAhead and lookBehind to avoid dealing with null values\n */\nexport const EOF_TOKEN = { type: TokenType.EOF, text: '«EOF»', value: '«EOF»' };\n\n/** Checks if two tokens are equivalent */\nexport const testToken =\n  (compareToken: { type: TokenType; value: string }) =>\n  (token: Token): boolean =>\n    token.type === compareToken.type && token.value === compareToken.value;\n\n/** Util object that allows for easy checking of Reserved Keywords */\nexport const isToken = {\n  AS: testToken({ value: 'AS', type: TokenType.RESERVED_KEYWORD }),\n  AND: testToken({ value: 'AND', type: TokenType.RESERVED_LOGICAL_OPERATOR }),\n  BETWEEN: testToken({ value: 'BETWEEN', type: TokenType.RESERVED_KEYWORD }),\n  CASE: testToken({ value: 'CASE', type: TokenType.RESERVED_CASE_START }),\n  CAST: testToken({ value: 'CAST', type: TokenType.RESERVED_KEYWORD }),\n  BY: testToken({ value: 'BY', type: TokenType.RESERVED_KEYWORD }),\n  END: testToken({ value: 'END', type: TokenType.RESERVED_CASE_END }),\n  FROM: testToken({ value: 'FROM', type: TokenType.RESERVED_COMMAND }),\n  LIMIT: testToken({ value: 'LIMIT', type: TokenType.RESERVED_COMMAND }),\n  SELECT: testToken({ value: 'SELECT', type: TokenType.RESERVED_COMMAND }),\n  SET: testToken({ value: 'SET', type: TokenType.RESERVED_COMMAND }),\n  TABLE: testToken({ value: 'TABLE', type: TokenType.RESERVED_KEYWORD }),\n  WINDOW: testToken({ value: 'WINDOW', type: TokenType.RESERVED_COMMAND }),\n  WITH: testToken({ value: 'WITH', type: TokenType.RESERVED_COMMAND }),\n};\n\n/** Checks if token is a Reserved Command or Reserved Binary Command */\nexport const isCommand = (token: Token): boolean =>\n  token.type === TokenType.RESERVED_COMMAND || token.type === TokenType.RESERVED_BINARY_COMMAND;\n\n/** Checks if token is any Reserved Keyword or Command */\nexport const isReserved = (token: Token): boolean =>\n  token.type === TokenType.RESERVED_KEYWORD ||\n  token.type === TokenType.RESERVED_LOGICAL_OPERATOR ||\n  token.type === TokenType.RESERVED_DEPENDENT_CLAUSE ||\n  token.type === TokenType.RESERVED_JOIN_CONDITION ||\n  token.type === TokenType.RESERVED_COMMAND ||\n  token.type === TokenType.RESERVED_BINARY_COMMAND ||\n  token.type === TokenType.RESERVED_CASE_START ||\n  token.type === TokenType.RESERVED_CASE_END;\n"],"file":"token.js"}